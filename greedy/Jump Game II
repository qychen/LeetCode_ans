Solu1:
class Solution(object):
    def jump(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        if len(nums) < 2:
            return 0
        
        step = 1
        current = []
        current.append(0)
        while True:
            new = []
            for index in current:
                if index+nums[index] >=len(nums)-1:
                    return step
                else:
                    for j in range(1,nums[index]+1):
                        if index+j not in new and index+j not in current:
                            new.append(index+j)
            step += 1
            current = list(new)
      
Solu2:
class Solution(object):
    def jump(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        if len(nums) < 2:
            return 0
        
        step = 0
        left = 0
        right = 0
        while True:
            max_right = 0
            step += 1
            for i in range(left, right+1):
                if i+nums[i]>=len(nums)-1:
                    return step
                else:
                    max_right = max(max_right, i+nums[i])
            left = right+1
            right = max_right
            

Solu1 is wrong! This problem is not totally a greedy, since it ask the global optimization, we must search all the index. But solu1 does in the wrong way, it appends all possible terminal for each step to the list, which means index3 can be reached from 1+2 and 2+1, and thus been calculated many times. Even for the global search, we must ensure that each index has been search and just been searched ONCE! That is how solu2 does. 
          
        
        